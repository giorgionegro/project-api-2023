name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache valgrind 
      uses: actions/cache@v2
      id: cache-valgrind
      with:
        path: "~/valgrind"
        key: 3.21.0

    - name: Install valgrind
      env:
        CACHE_HIT: ${{steps.cache-valgrind.outputs.cache-hit}}
        VALGRIND_VERSION: 3.21.0
      run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/valgrind/* /
          else
            sudo apt-get install --yes valgrind
            mkdir -p ~/valgrind
            sudo dpkg -L valgrind | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/valgrind/
          fi
        
    - name: rest
      run: sudo apt-get install -y libc6-dbg
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: install
      run: sudo apt-get install -y valgrind
    - name: valgrind
      run: sudo cp cmake-build-debug/prova.txt /build && ls build/ && valgrind ./build/api

